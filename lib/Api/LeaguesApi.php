<?php
/**
 * LeaguesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API-FOOTBALL
 *
 * +830 football leagues & cups. Livescore (15s), odds, events, line-ups, coachs, players, top scorers, standings, statistics, transfers, predictions. Documentation : https://www.api-football.com/documentation-v3
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace FootballApi\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FootballApi\Client\ApiException;
use FootballApi\Client\Configuration;
use FootballApi\Client\HeaderSelector;
use FootballApi\Client\ObjectSerializer;

/**
 * LeaguesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeaguesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client,
        Configuration $config,
        HeaderSelector $selector
    )
    {
        $this->client = $client;
        $this->config = $config;
        $this->headerSelector = $selector;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v3LeaguesByLeagueId
     *
     * @param float $id The id of the league (optional)
     * @param string $name The name of the league (optional)
     * @param float $team The id of the team (optional)
     * @param string $search The name or the country of the league &#x60;&gt;&#x3D; 3 characters&#x60; (optional)
     * @param string $code The Alpha2 code of the country &#x60;2 characters&#x60; Like FR, GB, IT… (optional)
     * @param string $type The type of the league   Enum: &#x60;league&#x60; or &#x60;cup&#x60; (optional)
     * @param string $country The country name of the league (optional)
     * @param string $current The state of the league Enum: &#x60;true&#x60; or &#x60;false&#x60; (optional)
     * @param float $season The season of the league &#x60;4 characters&#x60; Like 2018, 2019 etc... (optional)
     * @param float $last The X last leagues/cups added in the API &#x60;&lt;&#x3D; 2 characters&#x60; (optional)
     *
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function v3LeaguesByLeagueId($id = null, $name = null, $team = null, $search = null, $code = null, $type = null, $country = null, $current = null, $season = null, $last = null)
    {
        $this->v3LeaguesByLeagueIdWithHttpInfo($id, $name, $team, $search, $code, $type, $country, $current, $season, $last);
    }

    /**
     * Operation v3LeaguesByLeagueIdWithHttpInfo
     *
     * @param float $id The id of the league (optional)
     * @param string $name The name of the league (optional)
     * @param float $team The id of the team (optional)
     * @param string $search The name or the country of the league &#x60;&gt;&#x3D; 3 characters&#x60; (optional)
     * @param string $code The Alpha2 code of the country &#x60;2 characters&#x60; Like FR, GB, IT… (optional)
     * @param string $type The type of the league   Enum: &#x60;league&#x60; or &#x60;cup&#x60; (optional)
     * @param string $country The country name of the league (optional)
     * @param string $current The state of the league Enum: &#x60;true&#x60; or &#x60;false&#x60; (optional)
     * @param float $season The season of the league &#x60;4 characters&#x60; Like 2018, 2019 etc... (optional)
     * @param float $last The X last leagues/cups added in the API &#x60;&lt;&#x3D; 2 characters&#x60; (optional)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function v3LeaguesByLeagueIdWithHttpInfo($id = null, $name = null, $team = null, $search = null, $code = null, $type = null, $country = null, $current = null, $season = null, $last = null)
    {
        $returnType = '';
        $request = $this->v3LeaguesByLeagueIdRequest($id, $name, $team, $search, $code, $type, $country, $current, $season, $last);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v3LeaguesByLeagueIdAsync
     *
     *
     *
     * @param float $id The id of the league (optional)
     * @param string $name The name of the league (optional)
     * @param float $team The id of the team (optional)
     * @param string $search The name or the country of the league &#x60;&gt;&#x3D; 3 characters&#x60; (optional)
     * @param string $code The Alpha2 code of the country &#x60;2 characters&#x60; Like FR, GB, IT… (optional)
     * @param string $type The type of the league   Enum: &#x60;league&#x60; or &#x60;cup&#x60; (optional)
     * @param string $country The country name of the league (optional)
     * @param string $current The state of the league Enum: &#x60;true&#x60; or &#x60;false&#x60; (optional)
     * @param float $season The season of the league &#x60;4 characters&#x60; Like 2018, 2019 etc... (optional)
     * @param float $last The X last leagues/cups added in the API &#x60;&lt;&#x3D; 2 characters&#x60; (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function v3LeaguesByLeagueIdAsync($id = null, $name = null, $team = null, $search = null, $code = null, $type = null, $country = null, $current = null, $season = null, $last = null)
    {
        return $this->v3LeaguesByLeagueIdAsyncWithHttpInfo($id, $name, $team, $search, $code, $type, $country, $current, $season, $last);
    }

    /**
     * Operation v3LeaguesByLeagueIdAsyncWithHttpInfo
     *
     *
     *
     * @param float $id The id of the league (optional)
     * @param string $name The name of the league (optional)
     * @param float $team The id of the team (optional)
     * @param string $search The name or the country of the league &#x60;&gt;&#x3D; 3 characters&#x60; (optional)
     * @param string $code The Alpha2 code of the country &#x60;2 characters&#x60; Like FR, GB, IT… (optional)
     * @param string $type The type of the league   Enum: &#x60;league&#x60; or &#x60;cup&#x60; (optional)
     * @param string $country The country name of the league (optional)
     * @param string $current The state of the league Enum: &#x60;true&#x60; or &#x60;false&#x60; (optional)
     * @param float $season The season of the league &#x60;4 characters&#x60; Like 2018, 2019 etc... (optional)
     * @param float $last The X last leagues/cups added in the API &#x60;&lt;&#x3D; 2 characters&#x60; (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function v3LeaguesByLeagueIdAsyncWithHttpInfo($id = null, $name = null, $team = null, $search = null, $code = null, $type = null, $country = null, $current = null, $season = null, $last = null)
    {
        $request = $this->v3LeaguesByLeagueIdRequest($id, $name, $team, $search, $code, $type, $country, $current, $season, $last);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return $response;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v3LeaguesByLeagueId'
     *
     * @param float $id The id of the league (optional)
     * @param string $name The name of the league (optional)
     * @param float $team The id of the team (optional)
     * @param string $search The name or the country of the league &#x60;&gt;&#x3D; 3 characters&#x60; (optional)
     * @param string $code The Alpha2 code of the country &#x60;2 characters&#x60; Like FR, GB, IT… (optional)
     * @param string $type The type of the league   Enum: &#x60;league&#x60; or &#x60;cup&#x60; (optional)
     * @param string $country The country name of the league (optional)
     * @param string $current The state of the league Enum: &#x60;true&#x60; or &#x60;false&#x60; (optional)
     * @param float $season The season of the league &#x60;4 characters&#x60; Like 2018, 2019 etc... (optional)
     * @param float $last The X last leagues/cups added in the API &#x60;&lt;&#x3D; 2 characters&#x60; (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function v3LeaguesByLeagueIdRequest($id = null, $name = null, $team = null, $search = null, $code = null, $type = null, $country = null, $current = null, $season = null, $last = null)
    {

        $resourcePath = '/v3/leagues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($team !== null) {
            $queryParams['team'] = ObjectSerializer::toQueryValue($team, null);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search, null);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country, null);
        }
        // query params
        if ($current !== null) {
            $queryParams['current'] = ObjectSerializer::toQueryValue($current, null);
        }
        // query params
        if ($season !== null) {
            $queryParams['season'] = ObjectSerializer::toQueryValue($season, null);
        }
        // query params
        if ($last !== null) {
            $queryParams['last'] = ObjectSerializer::toQueryValue($last, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name'     => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
